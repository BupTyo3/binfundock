"""
Django settings for binfun project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import configparser
import logging
import os

from pathlib import Path
from typing import List, Optional, Tuple
from dotenv import load_dotenv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env_path = Path('.') / '.env'
load_dotenv(dotenv_path=env_path, override=True)
logging.getLogger('telethon').setLevel(level=logging.WARNING)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

# For development '*'
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'drf_yasg',

    'django_extensions',
    'debug_toolbar',

    # Project apps
    'apps.crontask',
    'apps.market',
    'apps.order',
    'apps.pair',
    'apps.signal',
    'apps.strategy',
    'apps.techannel',
    'apps.telegram',
    'apps.user',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'binfun.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            f'{BASE_DIR}/binfun',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'binfun.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST', 'db'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# static for admin panel
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


# Django REST framework

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20
}

AUTH_USER_MODEL = 'user.User'

PROJECT_TITLE = 'Pet signal'

API_VERSION = 'v1'


# CELERY settings
REDIS_URL = f'redis://redis:6379/0'
CELERY_BROKER_URL = REDIS_URL

CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 10 * 60
CELERY_TIMEZONE = 'Europe/Kiev'

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'

# Project
DEFAULT_INVIOLABLE_BALANCE_PERC = '15.0'
DEFAULT_EXTREMAL_SL_PRICE_SHIFT_COEF = '8.0'
DEFAULT_ALLOWABLE_DURATION_OF_TASK_SECS = '60'  # For unsetting busy_setting_time field
DEFAULT_TRAIL_ONCOMING_PERCENT = '2'  # Oncoming percent for trailing-stop from EP to current price: 2 means 50%
DEFAULT_MARKET_ENTRY_DEVIATION_PERC = '0.15'  # Changes closest EP by this amount % to initiate market entry
DEFAULT_SECOND_ENTRY_DEVIATION_PERC = '1.0'  # For divergences second EP distance in % from current price
DEFAULT_FIRST_PROFIT_DEVIATION_PERC = '0.75'  # For divergences first TP distance in % from current price
DEFAULT_SECOND_PROFIT_DEVIATION_PERC = '1.5'  # For divergences second TP distance in % from current price
DEFAULT_THIRD_PROFIT_DEVIATION_PERC = '2.75'  # For divergences third TP distance in % from current price
DEFAULT_FOURTH_PROFIT_DEVIATION_PERC = '4.25'  # For divergences fourth TP distance in % from current price
DEFAULT_FIFTH_PROFIT_DEVIATION_PERC = '15'  # For divergences fifth TP distance in % from current price
DEFAULT_STOP_LOSS_DEVIATION_PERC = '1.5'  # For divergences stop loss distance in % from current price

DEFAULT_MARKET_SPOT_RAW_URL = 'https://www.binance.com/en/trade/{}?theme=dark'
DEFAULT_MARKET_FUTURES_RAW_URL = 'https://www.binance.com/en/futures/{}?theme=dark'

# CRON TASKS
DEFAULT_COMMON_PERIOD_OF_CRON_CELERY_TASKS_SECS = '7.0'
DEFAULT_PERIOD_OF_PRICES_UPDATE_TASKS_SECS = '50.0'

# Project Telegram

PARSED_IMAGES_STORAGE = f'{BASE_DIR}/parsed-images'

# Logger

# Change telethon logging level
logging.getLogger('telethon').setLevel(
    level=int(os.getenv('TELETHON_LOG_LEVEL', logging.WARNING)))

logging.getLogger('celery').setLevel(
    level=int(os.getenv('CELERY_LOG_LEVEL', logging.INFO)))

# Main logger settings

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': (
                '[%(asctime)s] [%(process)d] [%(levelname)s] '
                '[%(name)s] %(message)s'
            ),
            'datefmt': '%Y-%m-%d %H:%M:%S %z',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': f'{BASE_DIR}/logs/binfun.log',
            'maxBytes': 1024*1024*10,  # 5 Mb
            'backupCount': 500,
            'formatter': 'verbose'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'filters': ['require_debug_false'],
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', ],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'DEBUG',
    },
}


class Config:
    usdt_: str = 'USDT'
    btc_: str = 'BTC'
    one_hundred_percent: float = 100.0
    conf_file = "config.ini"
    # Market API
    market_api_key: Optional[str]
    market_api_secret: Optional[str]
    # Telegram
    api_id: Optional[str]
    api_hash: Optional[str]

    def __init__(self):
        config = configparser.ConfigParser()
        config.read(self.conf_file)
        market = config['Market']
        self.market_api_key = market.get('market_api_key', None)
        self.market_api_secret = market.get('market_api_secret', None)
        self.futures_market_api_key = market.get('futures_market_api_key', None)
        self.futures_market_api_secret = market.get('futures_market_api_secret', None)
        self.market_fee: float = market.getfloat('market_fee')
        self.futures_market_fee: float = market.getfloat('futures_market_fee')
        self.inviolable_balance_perc: float = float(market.get(
            'inviolable_balance_perc', DEFAULT_INVIOLABLE_BALANCE_PERC))
        self.market_spot_raw_url = market.get('market_spot_raw_url', DEFAULT_MARKET_SPOT_RAW_URL)
        self.market_futures_raw_url = market.get('market_futures_raw_url', DEFAULT_MARKET_FUTURES_RAW_URL)
        self.market_futures_raw_url = market.get('market_futures_raw_url', DEFAULT_MARKET_FUTURES_RAW_URL)
        logic = config['Logic']
        self.common_period_of_cron_celery_tasks_secs: float = float(logic.get(
            'common_period_of_cron_celery_tasks_secs', DEFAULT_COMMON_PERIOD_OF_CRON_CELERY_TASKS_SECS))
        self.period_of_prices_update_tasks_secs: float = float(logic.get(
            'period_of_prices_update_tasks_secs', DEFAULT_PERIOD_OF_PRICES_UPDATE_TASKS_SECS))
        self.extremal_sl_price_shift_coef: float = float(logic.get(
            'extremal_sl_price_shift_coef', DEFAULT_EXTREMAL_SL_PRICE_SHIFT_COEF))
        self.allowable_duration_of_task_secs: float = float(logic.get(
            'allowable_duration_of_task_secs', DEFAULT_ALLOWABLE_DURATION_OF_TASK_SECS))
        self.trail_oncoming_percent: float = float(logic.get(
            'trail_oncoming_percent', DEFAULT_TRAIL_ONCOMING_PERCENT))

        # Parameters for divergence indicator
        self.market_entry_deviation_perc: float = float(logic.get(
            'market_entry_deviation_perc', DEFAULT_MARKET_ENTRY_DEVIATION_PERC))
        self.second_entry_deviation_perc: float = float(logic.get(
            'second_entry_deviation_perc', DEFAULT_SECOND_ENTRY_DEVIATION_PERC))
        self.first_profit_deviation_perc: float = float(logic.get(
            'first_profit_deviation_perc', DEFAULT_FIRST_PROFIT_DEVIATION_PERC))
        self.second_profit_deviation_perc: float = float(logic.get(
            'second_profit_deviation_perc', DEFAULT_SECOND_PROFIT_DEVIATION_PERC))
        self.third_profit_deviation_perc: float = float(logic.get(
            'third_profit_deviation_perc', DEFAULT_THIRD_PROFIT_DEVIATION_PERC))
        self.fourth_profit_deviation_perc: float = float(logic.get(
            'fourth_profit_deviation_perc', DEFAULT_FOURTH_PROFIT_DEVIATION_PERC))
        self.fifth_profit_deviation_perc: float = float(logic.get(
            'fifth_profit_deviation_perc', DEFAULT_FIFTH_PROFIT_DEVIATION_PERC))
        self.delta_stop_deviation_perc: float = float(logic.get(
            'delta_stop_deviation_perc', DEFAULT_STOP_LOSS_DEVIATION_PERC))

        signal = config['Signal']
        self.accessible_main_coins: List[str] = signal['accessible_main_coins'].split(',')
        self.all_accessible_main_coins: List[str] = signal['all_accessible_main_coins'].split(',')
        telegram = config['Telegram']
        self.api_id = telegram.get('api_id', None)
        self.api_hash = telegram.get('api_hash', None)
        self.api_id_luck = telegram.get('api_id_luck', None)
        self.api_hash_luck = telegram.get('api_hash_luck', None)
        self.api_id_xy = telegram.get('api_id_xy', None)
        self.api_hash_xy = telegram.get('api_hash_xy', None)
        self.chat_china_id = telegram.get('chat_china_id', None)
        self.crypto_angel_id = telegram.get('crypto_angel_id', None)
        self.crypto_futures = telegram.get('crypto_futures', None)
        self.tca_altcoin = telegram.get('TCA_Altcoin', None)
        self.tca_leverage = telegram.get('TCA_Leverage', None)
        self.CFTrader = telegram.get('CFTrader', None)
        self.white_bull = telegram.get('white_bull', None)
        self.lucrative_channel = telegram.get('Lucrative_Recommendations', None)
        self.Luck8414 = telegram.get('Luck8414', None)
        self.lucrative_trend = telegram.get('Lucrative_Trend', None)
        self.wcse = telegram.get('wcse', None)
        self.lucrative = telegram.get('Lucrative', None)
        self.klondike_margin = telegram.get('klondike_margin', None)
        self.klondike_scalp = telegram.get('klondike_scalp', None)
        self.klondike_altcoin = telegram.get('klondike_altcoin', None)
        self.margin_whales = telegram.get('Margin_Whales', None)
        self.server = telegram.get('Server', None)
        self.fsvzo = telegram.get('fsvzo', None)


conf_obj = Config()

try:
    from local_settings import *
except ImportError:
    pass
